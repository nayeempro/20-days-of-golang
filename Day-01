// starting code
/*
package main

import "fmt" // formatting for input and output.for more ---> (godoc fmt Println)

func main() {
	fmt.Println("day one start")
}
*/

// =============Variable=====================
/*
//1. Way of declaration


   var age int = 25          // Declaring an integer variable with an initial value
   var name string = "Alice" // Declaring a string variable with an initial value
   var height float64        // Declaring a variable without assigning a value (will be set to zero value)


// 2. Zero Value

   If no initial value is provided, Go assigns a zero value to the variable based on its type:
   0 --> integers,
   0.0 --> floats
   false --> booleans
   "" ---> strings
   nil --> pointers, interfaces, slices, channels, maps, and functions


// Type interference

var age = 25       // Go infers `age` as an `int`
var name = "Alice" // Go infers `name` as a `string`

// short

age := 25       // Equivalent to `var age int = 25`
name := "Alice" // Equivalent to `var name string = "Alice"`
// Note: := can only be used within functions and not for package-level variables.

// Multiple Declaration
var a, b, c int = 1, 2, 3
var x, y, z = 10, "hello", 3.14 // `x` is int, `y` is string, `z` is float64
var (
	age    int     = 25
	name   string  = "Alice"
	height float64 = 5.9
)

// Constants in Go

const Pi float64 = 3.14159
const DaysInWeek = 7    // Type inference applies; Go infers `DaysInWeek` as an `int`
Note: Unlike variables, constants in Go must be initialized at the time of declaration and cannot rely on runtime values.

// =========Enumerated Constants with iota===========
It’s commonly used to define a sequence of constants.
const (
    Red   = iota   // 0
    Green          // 1
    Blue           // 2
)

// you can skip one line
const (
    A = iota // 0
    B        // 1
    _        // Skips 2
    C        // 3
)

fmt.Println(A, B, C) // Output: 0 1 3
Here, the underscore _ acts as a placeholder and skips the iota value 2, so C gets the next value, 3.

// Another uses of iota
const (
    Sunday = iota         // 0
    Monday                // 1
    Tuesday               // 2
    Wednesday = 10       // Explicitly set Wednesday to 10
    Thursday = iota      // Resumes from the last iota value + 1, so Thursday is 4
    Friday               // 5
)

fmt.Println(Sunday, Monday, Tuesday, Wednesday, Thursday, Friday)
// Output: 0 1 2 10 4 5
*/

//===================Condition================
// for loop
/*
for initialization; condition; post {
    // Code to execute
}

//(a) Classic for Loop

package main

import "fmt"

func main() {
	for i := 1; i <= 10; i++ {
		fmt.Println(i)
	}
}

func main() {
Using break and continue in Loops
for i := 0; i < 10; i++ {
	if i == 5 {
		continue // Skips printing 5
	}
	if i == 8 {
		break // Exits the loop when i is 8
	}
	fmt.Println(i)
}
Range Based for loop
numbers := []int{1, 2, 3, 4, 5}
for index, value := range numbers {
	fmt.Printf("Index: %d, Value: %d\n", index, value)
}
If you don’t need the index, you can use _ to ignore it:
for _, value := range numbers {
	fmt.Println(value)
}
//=== Looping Over Maps =======
person := map[string]string{"name": "Alice", "city": "New York"}
for key, value := range person {
	fmt.Printf("%s: %s\n", key, value)
}
output: name: Alice
		city: New York
=== Looping Over String =======
for index, char := range "Hello" {
	fmt.Printf("Index: %d, Char: %c\n", index, char)
	// H,e,l,l,o
}

// ========= Nested for Loops =========

matrix := [][]int{
	{1, 2, 3},
	{4, 5, 6},
	{7, 8, 9},
}

for i := 0; i < len(matrix); i++ {
	for j := 0; j < len(matrix[i]); j++ {
		fmt.Printf("%d ", matrix[i][j])
	}
	fmt.Println()
}

outerLoop:
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			if i == 1 && j == 1 {
				break outerLoop // Breaks out of the outer loop
			}
			fmt.Println(i, j)
		}
	}
}

//

package main

import (
	"fmt"
	"time"
)

// Looping with Functions or Goroutines
func printHello(index int) {
	fmt.Printf("Hello from goroutine %d\n", index)
}

func main() {
	for i := 0; i < 5; i++ {
		go printHello(i)
	}
	time.Sleep(2 * time.Second) // Give goroutines time to complete
	fmt.Printf("Complete within 2 second ")
}
*/

// =========== Conditionals =========
/*

package main

import "fmt"

func main() {
	//If--else if---else
	// x := 7
	// if x > 10 {
	// 	fmt.Println("x is greater than 10")
	// 	// (variable declaration within if_else)if y := 10; y > 5 { y is only accessible within this block}
	// } else if x > 5 {
	// 	fmt.Println("x is greater than 5 but less than or equal to 10")
	// } else {
	// 	fmt.Println("x is 5 or less")
	// }

	// Switch Statement
	// x := 2
	// switch x {
	// case 1:
	// 	fmt.Println("x is 1")
	// case 2:
	// 	fmt.Println("x is 2")
	// case 3:
	// 	fmt.Println("x is 3")
	// default:
	// 	fmt.Println("x is unknown")
	// }
	//// switch without expression
	// x := 15
	// switch {
	// case x < 10:
	//     fmt.Println("x is less than 10")
	// case x >= 10 && x <= 20:
	//     fmt.Println("x is between 10 and 20")
	// default:
	//     fmt.Println("x is greater than 20")
	// }
	// // switch multiple expression with case
	// day := "Saturday"
	// switch day {
	// case "Saturday", "Sunday":
	// 	fmt.Println("It's the weekend!")
	// default:
	// 	fmt.Println("It's a weekday")
	// }

	// // If you want the code to continue to the next case, use the (fallthrough) keyword.
	// x := 3
	// switch x {
	// case 1:
	// 	fmt.Println("Case 1")
	// case 3:
	// 	fmt.Println("Case 3")
	// 	fallthrough
	// case 6:
	// 	fmt.Println("I am the next case of fallthrough case. execute for fallthrough")
	// default:
	// 	fmt.Println("Default case")
	// }

}

// Type Switch
func printType(x interface{}) {
	switch x.(type) { //x.(type) is type of X
	case int:
		fmt.Println("x is an integer")
	case string:
		fmt.Println("x is a string")
	default:
		fmt.Println("x is of some other type")
	}
}

func main() {
	printType(42)
	printType("hello")
}
*/

//=========================Data Types=========================
/*

1. Numeric
var i int32 = 42 // think int vs unit
var f float64 = 3.14159
var c complex64 = 1 + 2i

2. String : A string in Go is a sequence of UTF-8 characters, representing textual data. Strings are immutable, meaning their content cannot be modified once created. String literals are enclosed in double quotes ("Hello") or backticks (`Hello`) for raw strings that ignore escape characters.
var name string = "Hello World"
var greeting = "Hello, " + "World!" // string conca
fmt.Println(greeting)  // Outputs: Hello, World!

3. boolean (true or false)

//================= Composite Data Type =======================
a. Array
Arrays in Go are fixed-size collections of elements of the same type. Once an array is created, its size cannot change.

var numbers [5]int  // Declares an array of 5 integers

b. Slice
Slices are dynamic, flexible arrays. Unlike arrays, slices can grow and shrink. They provide powerful ways to manipulate collections of data.

var nums = []int{1, 2, 3, 4}
nums = append(nums, 5)  // Append value to slice
fmt.Println(nums)       // Outputs: [1 2 3 4 5]

c. Map
Maps are key-value pairs that allow you to retrieve values based on a unique key. They are similar to dictionaries in other languages.

example:

var scores = map[string]int{"Alice": 90, "Bob": 85} // key:string value:int
scores["Charlie"] = 95
fmt.Println(scores) ---> "Alice": 90, "Bob": 85, "Charlie": 95

d. Struct
A struct is a collection of fields grouped together to represent a complex data type. Structs are crucial for representing real-world entities with multiple attributes.

type Person struct {
    Name string
    Age  int
}

var john = Person{Name: "John", Age: 25}
fmt.Println(john.Name, john.Age)


// ============== Pointer Types =========
Pointers store memory addresses of variables. They are powerful for managing memory and passing data by reference rather than by value.

example
var x = 10
var p = &x       // p is a pointer to x
fmt.Println(*p)  // Dereferencing p gives the value of x (10)
*p = 20          // Changing the value at p changes x
fmt.Println(x)   // Outputs: 20

//===================Interface Types
Interfaces are abstract types that allow polymorphism. An interface defines a set of method signatures that any type can implement.

Example of Interface Usage:
type Speaker interface {
    Speak() string
}

type Dog struct{}
func (d Dog) Speak() string {
    return "Woof!"
}

type Cat struct{}
func (c Cat) Speak() string {
    return "Meow!"
}

func makeSound(s Speaker) {
    fmt.Println(s.Speak())
}

func main() {
    makeSound(Dog{})  // Outputs: Woof!
    makeSound(Cat{})  // Outputs: Meow!
}

 Channels
Channels are conduits for goroutines to communicate with each other, enabling concurrent programming in Go. Channels allow you to send and receive typed data between goroutines.
Example:
func main() {
    ch := make(chan int)

    go func() {
        ch <- 42  // Send value to channel
    }()

    fmt.Println(<-ch)  // Receive value from channel
}

//======================Function Closures=================
Closures are functions that capture variables from their surrounding scope. They are useful for managing state within a function.

Example of Closure Usage:

func counter() func() int {
    count := 0
    return func() int {
        count++
        return count
    }
}

func main() {
    c := counter()
    fmt.Println(c())  // Outputs: 1
    fmt.Println(c())  // Outputs: 2
}

*/

// ============== Basic uses of fmt package ==================
/*
package main

import "fmt"

func main() {
	// fmt.Print(): Prints text without a newline.
	// fmt.Println(): Prints text with a newline.
	// fmt.Printf(): Allows for formatted output, similar to printf in C
	name := "Alice"
	age := 25
	fmt.Printf("Name: %s, Age: %d\n", name, age) //Name: Alice, Age: 25
	fmt.Print(name, age)                         //Alice25
	fmt.Println(name, age)                       //Alice 25

	//fmt.Scan() allows you to read user input from standard input.
	// fmt.Scanf : Like fmt.Printf, fmt.Scanf can take formatted input with specific formats.
	var nayeem string
	fmt.Print("Enter your name: ")
	fmt.Scan(&nayeem) // can take any type of value
	fmt.Println("Hello,", nayeem)

	var nayeemage int
	fmt.Print("Enter your age: ")
	fmt.Scanf("%d", &nayeemage) // only take number
	fmt.Printf("You are %d years old.\n", nayeemage)

}
*/
